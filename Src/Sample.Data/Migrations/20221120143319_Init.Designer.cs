// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Sample.Data.DataContexts;

namespace Sample.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20221120143319_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Sample.Data.Entities.AccountAuthEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_id");

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("code");

                    b.Property<DateTime?>("CreateDatetime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_datetime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("creator_id");

                    b.Property<string>("HashPasswordKey")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("hash_password_key");

                    b.Property<string>("HashedPassword")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("hashed_password");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdateDatetime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("update_datetime");

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uuid")
                        .HasColumnName("updater_id");

                    b.Property<string>("Username")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_account_auth");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("ix_account_auth_account_id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_account_auth_code");

                    b.HasIndex("CreateDatetime")
                        .HasDatabaseName("ix_account_auth_create_datetime");

                    b.HasIndex("CreatorId")
                        .HasDatabaseName("ix_account_auth_creator_id");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("ix_account_auth_is_deleted");

                    b.HasIndex("UpdateDatetime")
                        .HasDatabaseName("ix_account_auth_update_datetime");

                    b.HasIndex("UpdaterId")
                        .HasDatabaseName("ix_account_auth_updater_id");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("ix_account_auth_username");

                    b.ToTable("account_auth");

                    b.HasData(
                        new
                        {
                            Id = new Guid("653dc4d4-ca05-45ac-83cd-e98fa91b890f"),
                            AccountId = new Guid("653dc4d4-ca05-45ac-83cd-e98fa91b890f"),
                            HashPasswordKey = "8sBXJjPl1BaK1ppd0PNMB366NHhmAx",
                            HashedPassword = "F0DC6BFBD368CDD9D63FC264C8B76E9F",
                            IsDeleted = false,
                            Type = 0,
                            Username = "root"
                        },
                        new
                        {
                            Id = new Guid("b81d0c90-3b91-44d4-bb00-95a5925fa5c6"),
                            AccountId = new Guid("b81d0c90-3b91-44d4-bb00-95a5925fa5c6"),
                            HashPasswordKey = "xE8czZlAixQOJDQ0oR7PqlYJUcywj6",
                            HashedPassword = "73906ACDE3F2288B37120E99886A57D7",
                            IsDeleted = false,
                            Type = 0,
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("Sample.Data.Entities.AccountEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("AccessLevel")
                        .HasColumnType("integer")
                        .HasColumnName("access_level");

                    b.Property<string>("AvatarLink")
                        .HasColumnType("text")
                        .HasColumnName("avatar_link");

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("code");

                    b.Property<DateTime?>("CreateDatetime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_datetime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("creator_id");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("boolean")
                        .HasColumnName("is_email_verified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<Guid?>("PermissionGroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("permission_group_id");

                    b.Property<DateTime?>("UpdateDatetime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("update_datetime");

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uuid")
                        .HasColumnName("updater_id");

                    b.HasKey("Id")
                        .HasName("pk_account");

                    b.HasIndex("AccessLevel")
                        .HasDatabaseName("ix_account_access_level");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_account_code");

                    b.HasIndex("CreateDatetime")
                        .HasDatabaseName("ix_account_create_datetime");

                    b.HasIndex("CreatorId")
                        .HasDatabaseName("ix_account_creator_id");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("ix_account_is_deleted");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_account_name");

                    b.HasIndex("PermissionGroupId")
                        .HasDatabaseName("ix_account_permission_group_id");

                    b.HasIndex("UpdateDatetime")
                        .HasDatabaseName("ix_account_update_datetime");

                    b.HasIndex("UpdaterId")
                        .HasDatabaseName("ix_account_updater_id");

                    b.ToTable("account");

                    b.HasData(
                        new
                        {
                            Id = new Guid("653dc4d4-ca05-45ac-83cd-e98fa91b890f"),
                            AccessLevel = 0,
                            Code = "root",
                            IsDeleted = true,
                            IsEmailVerified = false,
                            Name = "Root"
                        },
                        new
                        {
                            Id = new Guid("b81d0c90-3b91-44d4-bb00-95a5925fa5c6"),
                            AccessLevel = 1,
                            Code = "admin",
                            IsDeleted = false,
                            IsEmailVerified = false,
                            Name = "Admin",
                            PermissionGroupId = new Guid("41097c99-a6c7-4056-9ef5-be1de1fdfe77")
                        });
                });

            modelBuilder.Entity("Sample.Data.Entities.AccountSessionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("code");

                    b.Property<DateTime?>("CreateDatetime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_datetime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("creator_id");

                    b.Property<DateTime>("ExpiryDatetime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("expiry_datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("UpdateDatetime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("update_datetime");

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uuid")
                        .HasColumnName("updater_id");

                    b.HasKey("Id")
                        .HasName("pk_account_session");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("ix_account_session_account_id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_account_session_code");

                    b.HasIndex("CreateDatetime")
                        .HasDatabaseName("ix_account_session_create_datetime");

                    b.HasIndex("CreatorId")
                        .HasDatabaseName("ix_account_session_creator_id");

                    b.HasIndex("ExpiryDatetime")
                        .HasDatabaseName("ix_account_session_expiry_datetime");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("ix_account_session_is_deleted");

                    b.HasIndex("UpdateDatetime")
                        .HasDatabaseName("ix_account_session_update_datetime");

                    b.HasIndex("UpdaterId")
                        .HasDatabaseName("ix_account_session_updater_id");

                    b.ToTable("account_session");
                });

            modelBuilder.Entity("Sample.Data.Entities.AccountVerifyEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_id");

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("code");

                    b.Property<DateTime?>("CreateDatetime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_datetime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("creator_id");

                    b.Property<DateTime>("ExpiryDatetime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("expiry_datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdateDatetime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("update_datetime");

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uuid")
                        .HasColumnName("updater_id");

                    b.HasKey("Id")
                        .HasName("pk_account_verify");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("ix_account_verify_account_id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_account_verify_code");

                    b.HasIndex("CreateDatetime")
                        .HasDatabaseName("ix_account_verify_create_datetime");

                    b.HasIndex("CreatorId")
                        .HasDatabaseName("ix_account_verify_creator_id");

                    b.HasIndex("ExpiryDatetime")
                        .HasDatabaseName("ix_account_verify_expiry_datetime");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("ix_account_verify_is_deleted");

                    b.HasIndex("Type")
                        .HasDatabaseName("ix_account_verify_type");

                    b.HasIndex("UpdateDatetime")
                        .HasDatabaseName("ix_account_verify_update_datetime");

                    b.HasIndex("UpdaterId")
                        .HasDatabaseName("ix_account_verify_updater_id");

                    b.ToTable("account_verify");
                });

            modelBuilder.Entity("Sample.Data.Entities.PermissionEntity", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("code");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("category_name");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Code")
                        .HasName("pk_permission");

                    b.HasIndex("CategoryName")
                        .HasDatabaseName("ix_permission_category_name");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_permission_name");

                    b.ToTable("permission");

                    b.HasData(
                        new
                        {
                            Code = "profile.update",
                            CategoryName = "thông tin cá nhân",
                            Name = "sửa thông tin cá nhân"
                        },
                        new
                        {
                            Code = "account.create",
                            CategoryName = "tài khoản",
                            Name = "tạo tài khoản"
                        },
                        new
                        {
                            Code = "account.read",
                            CategoryName = "tài khoản",
                            Name = "xem tài khoản"
                        },
                        new
                        {
                            Code = "account.update",
                            CategoryName = "tài khoản",
                            Name = "sửa tài khoản"
                        },
                        new
                        {
                            Code = "account.delete",
                            CategoryName = "tài khoản",
                            Name = "xóa tài khoản"
                        },
                        new
                        {
                            Code = "account.changelog",
                            CategoryName = "tài khoản",
                            Name = "lịch sử thay đổi của tài khoản"
                        },
                        new
                        {
                            Code = "account.export",
                            CategoryName = "tài khoản",
                            Name = "xuất dữ liệu tài khoản"
                        },
                        new
                        {
                            Code = "permission.create",
                            CategoryName = "quyền",
                            Name = "tạo quyền"
                        },
                        new
                        {
                            Code = "permission.read",
                            CategoryName = "quyền",
                            Name = "xem quyền"
                        },
                        new
                        {
                            Code = "permission.update",
                            CategoryName = "quyền",
                            Name = "sửa quyền"
                        },
                        new
                        {
                            Code = "permission.delete",
                            CategoryName = "quyền",
                            Name = "xóa quyền"
                        },
                        new
                        {
                            Code = "permission.changelog",
                            CategoryName = "quyền",
                            Name = "lịch sử thay đổi của quyền"
                        },
                        new
                        {
                            Code = "permission.export",
                            CategoryName = "quyền",
                            Name = "xuất dữ liệu quyền"
                        },
                        new
                        {
                            Code = "setting.read",
                            CategoryName = "thiết lập",
                            Name = "xem thiết lập"
                        },
                        new
                        {
                            Code = "setting.update",
                            CategoryName = "thiết lập",
                            Name = "sửa thiết lập"
                        },
                        new
                        {
                            Code = "setting.changelog",
                            CategoryName = "thiết lập",
                            Name = "lịch sử thay đổi của thiết lập"
                        },
                        new
                        {
                            Code = "setting.export",
                            CategoryName = "thiết lập",
                            Name = "xuất dữ liệu thiết lập"
                        },
                        new
                        {
                            Code = "test.create",
                            CategoryName = "test",
                            Name = "tạo test"
                        },
                        new
                        {
                            Code = "test.read",
                            CategoryName = "test",
                            Name = "xem test"
                        },
                        new
                        {
                            Code = "test.update",
                            CategoryName = "test",
                            Name = "sửa test"
                        },
                        new
                        {
                            Code = "test.delete",
                            CategoryName = "test",
                            Name = "xóa test"
                        },
                        new
                        {
                            Code = "test.changelog",
                            CategoryName = "test",
                            Name = "lịch sử thay đổi của test"
                        },
                        new
                        {
                            Code = "test.export",
                            CategoryName = "test",
                            Name = "xuất dữ liệu test"
                        });
                });

            modelBuilder.Entity("Sample.Data.Entities.PermissionGroupEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("code");

                    b.Property<DateTime?>("CreateDatetime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_datetime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("creator_id");

                    b.Property<Guid?>("HierarchyParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("hierarchy_parent_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdateDatetime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("update_datetime");

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uuid")
                        .HasColumnName("updater_id");

                    b.HasKey("Id")
                        .HasName("pk_permission_group");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_permission_group_code");

                    b.HasIndex("CreateDatetime")
                        .HasDatabaseName("ix_permission_group_create_datetime");

                    b.HasIndex("CreatorId")
                        .HasDatabaseName("ix_permission_group_creator_id");

                    b.HasIndex("HierarchyParentId")
                        .HasDatabaseName("ix_permission_group_hierarchy_parent_id");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("ix_permission_group_is_deleted");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_permission_group_name");

                    b.HasIndex("UpdateDatetime")
                        .HasDatabaseName("ix_permission_group_update_datetime");

                    b.HasIndex("UpdaterId")
                        .HasDatabaseName("ix_permission_group_updater_id");

                    b.ToTable("permission_group");

                    b.HasData(
                        new
                        {
                            Id = new Guid("41097c99-a6c7-4056-9ef5-be1de1fdfe77"),
                            Code = "admin",
                            IsDeleted = false,
                            Name = "nhóm quyền quản trị"
                        });
                });

            modelBuilder.Entity("Sample.Data.Entities.PermissionValueEntity", b =>
                {
                    b.Property<string>("PermissionCode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("permission_code");

                    b.Property<Guid>("PermissionGroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("permission_group_id");

                    b.Property<bool>("ActualValue")
                        .HasColumnType("boolean")
                        .HasColumnName("actual_value");

                    b.Property<int>("Value")
                        .HasColumnType("integer")
                        .HasColumnName("value");

                    b.HasKey("PermissionCode", "PermissionGroupId")
                        .HasName("pk_permission_value");

                    b.HasIndex("PermissionGroupId")
                        .HasDatabaseName("ix_permission_value_permission_group_id");

                    b.ToTable("permission_value");

                    b.HasData(
                        new
                        {
                            PermissionCode = "profile.update",
                            PermissionGroupId = new Guid("41097c99-a6c7-4056-9ef5-be1de1fdfe77"),
                            ActualValue = true,
                            Value = 1
                        },
                        new
                        {
                            PermissionCode = "account.create",
                            PermissionGroupId = new Guid("41097c99-a6c7-4056-9ef5-be1de1fdfe77"),
                            ActualValue = true,
                            Value = 1
                        },
                        new
                        {
                            PermissionCode = "account.read",
                            PermissionGroupId = new Guid("41097c99-a6c7-4056-9ef5-be1de1fdfe77"),
                            ActualValue = true,
                            Value = 1
                        },
                        new
                        {
                            PermissionCode = "account.update",
                            PermissionGroupId = new Guid("41097c99-a6c7-4056-9ef5-be1de1fdfe77"),
                            ActualValue = true,
                            Value = 1
                        },
                        new
                        {
                            PermissionCode = "account.delete",
                            PermissionGroupId = new Guid("41097c99-a6c7-4056-9ef5-be1de1fdfe77"),
                            ActualValue = true,
                            Value = 1
                        },
                        new
                        {
                            PermissionCode = "account.changelog",
                            PermissionGroupId = new Guid("41097c99-a6c7-4056-9ef5-be1de1fdfe77"),
                            ActualValue = true,
                            Value = 1
                        },
                        new
                        {
                            PermissionCode = "account.export",
                            PermissionGroupId = new Guid("41097c99-a6c7-4056-9ef5-be1de1fdfe77"),
                            ActualValue = true,
                            Value = 1
                        },
                        new
                        {
                            PermissionCode = "permission.create",
                            PermissionGroupId = new Guid("41097c99-a6c7-4056-9ef5-be1de1fdfe77"),
                            ActualValue = true,
                            Value = 1
                        },
                        new
                        {
                            PermissionCode = "permission.read",
                            PermissionGroupId = new Guid("41097c99-a6c7-4056-9ef5-be1de1fdfe77"),
                            ActualValue = true,
                            Value = 1
                        },
                        new
                        {
                            PermissionCode = "permission.update",
                            PermissionGroupId = new Guid("41097c99-a6c7-4056-9ef5-be1de1fdfe77"),
                            ActualValue = true,
                            Value = 1
                        },
                        new
                        {
                            PermissionCode = "permission.delete",
                            PermissionGroupId = new Guid("41097c99-a6c7-4056-9ef5-be1de1fdfe77"),
                            ActualValue = true,
                            Value = 1
                        },
                        new
                        {
                            PermissionCode = "permission.changelog",
                            PermissionGroupId = new Guid("41097c99-a6c7-4056-9ef5-be1de1fdfe77"),
                            ActualValue = true,
                            Value = 1
                        },
                        new
                        {
                            PermissionCode = "permission.export",
                            PermissionGroupId = new Guid("41097c99-a6c7-4056-9ef5-be1de1fdfe77"),
                            ActualValue = true,
                            Value = 1
                        },
                        new
                        {
                            PermissionCode = "setting.read",
                            PermissionGroupId = new Guid("41097c99-a6c7-4056-9ef5-be1de1fdfe77"),
                            ActualValue = true,
                            Value = 1
                        },
                        new
                        {
                            PermissionCode = "setting.update",
                            PermissionGroupId = new Guid("41097c99-a6c7-4056-9ef5-be1de1fdfe77"),
                            ActualValue = true,
                            Value = 1
                        },
                        new
                        {
                            PermissionCode = "setting.changelog",
                            PermissionGroupId = new Guid("41097c99-a6c7-4056-9ef5-be1de1fdfe77"),
                            ActualValue = true,
                            Value = 1
                        },
                        new
                        {
                            PermissionCode = "setting.export",
                            PermissionGroupId = new Guid("41097c99-a6c7-4056-9ef5-be1de1fdfe77"),
                            ActualValue = true,
                            Value = 1
                        },
                        new
                        {
                            PermissionCode = "test.create",
                            PermissionGroupId = new Guid("41097c99-a6c7-4056-9ef5-be1de1fdfe77"),
                            ActualValue = true,
                            Value = 1
                        },
                        new
                        {
                            PermissionCode = "test.read",
                            PermissionGroupId = new Guid("41097c99-a6c7-4056-9ef5-be1de1fdfe77"),
                            ActualValue = true,
                            Value = 1
                        },
                        new
                        {
                            PermissionCode = "test.update",
                            PermissionGroupId = new Guid("41097c99-a6c7-4056-9ef5-be1de1fdfe77"),
                            ActualValue = true,
                            Value = 1
                        },
                        new
                        {
                            PermissionCode = "test.delete",
                            PermissionGroupId = new Guid("41097c99-a6c7-4056-9ef5-be1de1fdfe77"),
                            ActualValue = true,
                            Value = 1
                        },
                        new
                        {
                            PermissionCode = "test.changelog",
                            PermissionGroupId = new Guid("41097c99-a6c7-4056-9ef5-be1de1fdfe77"),
                            ActualValue = true,
                            Value = 1
                        },
                        new
                        {
                            PermissionCode = "test.export",
                            PermissionGroupId = new Guid("41097c99-a6c7-4056-9ef5-be1de1fdfe77"),
                            ActualValue = true,
                            Value = 1
                        });
                });

            modelBuilder.Entity("Sample.Data.Entities.SettingEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("code");

                    b.Property<DateTime?>("CreateDatetime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_datetime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("creator_id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("UpdateDatetime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("update_datetime");

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uuid")
                        .HasColumnName("updater_id");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_setting");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_setting_code");

                    b.HasIndex("CreateDatetime")
                        .HasDatabaseName("ix_setting_create_datetime");

                    b.HasIndex("CreatorId")
                        .HasDatabaseName("ix_setting_creator_id");

                    b.HasIndex("Description")
                        .HasDatabaseName("ix_setting_description");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("ix_setting_is_deleted");

                    b.HasIndex("UpdateDatetime")
                        .HasDatabaseName("ix_setting_update_datetime");

                    b.HasIndex("UpdaterId")
                        .HasDatabaseName("ix_setting_updater_id");

                    b.ToTable("setting");

                    b.HasData(
                        new
                        {
                            Id = new Guid("23799cd7-b0fb-447c-b105-5b34d98969e6"),
                            Code = "mail.host",
                            Description = "host để mail",
                            IsDeleted = false,
                            Value = "smtp.gmail.com"
                        },
                        new
                        {
                            Id = new Guid("c22d9ac6-5f8b-48ec-998a-5fd4f0e19479"),
                            Code = "mail.port",
                            Description = "port để mail",
                            IsDeleted = false,
                            Value = "587"
                        },
                        new
                        {
                            Id = new Guid("90522b63-c31d-458c-b183-bcaebec5d9a0"),
                            Code = "mail.username",
                            Description = "username để mail",
                            IsDeleted = false,
                            Value = "contact.goby@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("99ff3180-dfa9-4543-af28-d6848d55a321"),
                            Code = "mail.password",
                            Description = "mật khẩu để mail",
                            IsDeleted = false,
                            Value = "hong.banh@cptech.vn"
                        },
                        new
                        {
                            Id = new Guid("13ae6837-cdca-4bf1-a438-9c64e25d3de6"),
                            Code = "mail.enable-ssl",
                            Description = "sử dụng phương thức SSL để mail",
                            IsDeleted = false,
                            Value = "1"
                        },
                        new
                        {
                            Id = new Guid("0f451c30-b162-4947-9cba-cde403b4994e"),
                            Code = "mail.sender-name",
                            Description = "tên sử dụng để mail",
                            IsDeleted = false,
                            Value = "Support Okayla"
                        },
                        new
                        {
                            Id = new Guid("51c37338-4b04-476f-bb95-e8fe11e0403c"),
                            Code = "mail.sender-address",
                            Description = "e-mail sử dụng để mail",
                            IsDeleted = false,
                            Value = "support@goby.one"
                        },
                        new
                        {
                            Id = new Guid("26e84c09-8aa7-4e90-b1f6-f6e2ff6ef14c"),
                            Code = "accountVerify.timelife",
                            Description = "thời gian xác thực tài khoản (phút)",
                            IsDeleted = false,
                            Value = "5"
                        },
                        new
                        {
                            Id = new Guid("ebf55870-3cb6-4298-a8ec-0ecacf35554a"),
                            Code = "accountVerify.emailSubject",
                            Description = "tiêu đề e-mail xác thực tài khoản",
                            IsDeleted = false,
                            Value = "Xác thực tài khoản Okayla"
                        },
                        new
                        {
                            Id = new Guid("9e6b0c1c-94fd-4280-ab11-b50269850b31"),
                            Code = "accountVerify.emailBody",
                            Description = "nội dung e-mail xác thực tài khoản",
                            IsDeleted = false,
                            Value = "Xin vui lòng click vào link sau để xác thực tài khoản:<br/>{0}"
                        },
                        new
                        {
                            Id = new Guid("ae7b2a25-d280-4a38-a9ca-8ec582ffffa0"),
                            Code = "accountVerify.verifyLink",
                            Description = "cấu trúc link xác thực tài khoản",
                            IsDeleted = false,
                            Value = "https://identity.okayla.vn/verify/{0}"
                        },
                        new
                        {
                            Id = new Guid("5776ac54-8127-450a-8016-e907c1fc745a"),
                            Code = "resetPassword.timelife",
                            Description = "thời gian reset password (phút)",
                            IsDeleted = false,
                            Value = "5"
                        },
                        new
                        {
                            Id = new Guid("605d0afc-1c84-4ffd-9bc3-3108a16f12ce"),
                            Code = "resetPassword.emailSubject",
                            Description = "tiêu đề e-mail reset password",
                            IsDeleted = false,
                            Value = "Đặt lại mật khẩu tài khoản Okayla"
                        },
                        new
                        {
                            Id = new Guid("eb9311d8-af86-4327-9e15-af5a15921493"),
                            Code = "resetPassword.emailBody",
                            Description = "nội dung e-mail reset password",
                            IsDeleted = false,
                            Value = "Xin vui lòng click vào link sau để tiến hành đặt lại mật khẩu cho tài khoản của bạn:<br/>{0}"
                        },
                        new
                        {
                            Id = new Guid("25b071be-7b87-406e-83b1-320c27f45e9b"),
                            Code = "resetPassword.verifyLink",
                            Description = "cấu trúc link reset password",
                            IsDeleted = false,
                            Value = "https://identity.okayla.vn/resetPassword/{0}"
                        });
                });

            modelBuilder.Entity("Sample.Data.Entities.TestEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("code");

                    b.Property<DateTime?>("CreateDatetime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_datetime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("creator_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdateDatetime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("update_datetime");

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uuid")
                        .HasColumnName("updater_id");

                    b.HasKey("Id")
                        .HasName("pk_test");

                    b.ToTable("test");
                });

            modelBuilder.Entity("TripleSix.CoreOld.AutoAdmin.ObjectLogEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("ActorId")
                        .HasColumnType("uuid")
                        .HasColumnName("actor_id");

                    b.Property<string>("AfterData")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("after_data");

                    b.Property<string>("BeforeData")
                        .HasColumnType("text")
                        .HasColumnName("before_data");

                    b.Property<DateTime?>("Datetime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("datetime");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<Guid>("ObjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("object_id");

                    b.Property<string>("ObjectType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("object_type");

                    b.HasKey("Id")
                        .HasName("pk_object_log");

                    b.ToTable("object_log");
                });

            modelBuilder.Entity("Sample.Data.Entities.AccountAuthEntity", b =>
                {
                    b.HasOne("Sample.Data.Entities.AccountEntity", "Account")
                        .WithMany("Auths")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("fk_account_auth_account_account_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Sample.Data.Entities.AccountEntity", b =>
                {
                    b.HasOne("Sample.Data.Entities.PermissionGroupEntity", "PermissionGroup")
                        .WithMany("Accounts")
                        .HasForeignKey("PermissionGroupId")
                        .HasConstraintName("fk_account_permission_group_permission_group_id");

                    b.Navigation("PermissionGroup");
                });

            modelBuilder.Entity("Sample.Data.Entities.AccountSessionEntity", b =>
                {
                    b.HasOne("Sample.Data.Entities.AccountEntity", "Account")
                        .WithMany("Sessions")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("fk_account_session_account_account_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Sample.Data.Entities.AccountVerifyEntity", b =>
                {
                    b.HasOne("Sample.Data.Entities.AccountEntity", "Account")
                        .WithMany("Verifies")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("fk_account_verify_account_account_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Sample.Data.Entities.PermissionGroupEntity", b =>
                {
                    b.HasOne("Sample.Data.Entities.PermissionGroupEntity", "HierarchyParent")
                        .WithMany("HierarchyChilds")
                        .HasForeignKey("HierarchyParentId")
                        .HasConstraintName("fk_permission_group_permission_group_hierarchy_parent_id");

                    b.Navigation("HierarchyParent");
                });

            modelBuilder.Entity("Sample.Data.Entities.PermissionValueEntity", b =>
                {
                    b.HasOne("Sample.Data.Entities.PermissionEntity", "Permission")
                        .WithMany("PermissionValues")
                        .HasForeignKey("PermissionCode")
                        .HasConstraintName("fk_permission_value_permission_permission_code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sample.Data.Entities.PermissionGroupEntity", "PermissionGroup")
                        .WithMany("PermissionValues")
                        .HasForeignKey("PermissionGroupId")
                        .HasConstraintName("fk_permission_value_permission_group_permission_group_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("PermissionGroup");
                });

            modelBuilder.Entity("Sample.Data.Entities.AccountEntity", b =>
                {
                    b.Navigation("Auths");

                    b.Navigation("Sessions");

                    b.Navigation("Verifies");
                });

            modelBuilder.Entity("Sample.Data.Entities.PermissionEntity", b =>
                {
                    b.Navigation("PermissionValues");
                });

            modelBuilder.Entity("Sample.Data.Entities.PermissionGroupEntity", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("HierarchyChilds");

                    b.Navigation("PermissionValues");
                });
#pragma warning restore 612, 618
        }
    }
}
